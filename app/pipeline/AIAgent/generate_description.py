import google.generativeai as genai
from PIL import Image
from typing import Optional
import logging
import os
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
def generate_description_with_Gemini(image_path: str) -> Optional[str]:
    try:
        img = Image.open(image_path)
        new_size = (img.width * 2, img.height * 2)
        img = img.resize(new_size, Image.LANCZOS)  
        model = genai.GenerativeModel('gemini-2.5-pro')
        prompt = """
H√£y quan s√°t k·ªπ b·ª©c ·∫£nh da b√™n d∆∞·ªõi v√† m√¥ t·∫£ l·∫°i nh·ªØng ƒë·∫∑c ƒëi·ªÉm c√≥ th·ªÉ nh·∫≠n bi·∫øt b·∫±ng m·∫Øt th∆∞·ªùng, b·∫±ng ti·∫øng Vi·ªát ch√≠nh x√°c v√† trung l·∫≠p.

N·ªôi dung m√¥ t·∫£ n√™n bao g·ªìm c√°c y·∫øu t·ªë sau:

1. **V·ªã tr√≠** t·ªïn th∆∞∆°ng:  
   - Xu·∫•t hi·ªán ·ªü v√πng n√†o? (v√≠ d·ª•: m·∫∑t, c·ªï, l∆∞ng, l√≤ng b√†n tay, l√≤ng b√†n ch√¢n, k·∫Ω ng√≥n tay, v√πng sinh d·ª•c...)

2. **S·ªë l∆∞·ª£ng v√† k√≠ch th∆∞·ªõc**:  
   - C√≥ bao nhi√™u t·ªïn th∆∞∆°ng? (m·ªôt hay nhi·ªÅu)
   - ∆Ø·ªõc l∆∞·ª£ng k√≠ch th∆∞·ªõc t·ªïn th∆∞∆°ng (d∆∞·ªõi 5mm, kho·∫£ng 1‚Äì2cm, lan r·ªông to√†n v√πng...)

3. **M√†u s·∫Øc**:  
   - M√†u ch·ªß ƒë·∫°o l√† g√¨? (ƒë·ªè, h·ªìng, t√≠m, n√¢u, tr·∫Øng, v√†ng m·ªß, v.v.)
   - C√≥ ƒë·ªìng nh·∫•t kh√¥ng, hay c√≥ nhi·ªÅu v√πng m√†u kh√°c nhau?

4. **B·ªÅ m·∫∑t da**:  
   - T·ªïn th∆∞∆°ng c√≥ tr∆°n l√°ng, kh√¥, bong v·∫£y, s·∫ßn s√πi, ƒë√≥ng m√†y, lo√©t, hay c√≥ m·ª•n n∆∞·ªõc, m·ªß?

5. **B·ªù t·ªïn th∆∞∆°ng**:  
   - Ranh gi·ªõi r√µ hay m·ªù? B·ªù ƒë·ªÅu hay kh√¥ng ƒë·ªÅu? C√≥ d·∫°ng v√≤ng hay lan t·ªèa?

6. **T√≠nh ƒë·ªëi x·ª©ng**:  
   - T·ªïn th∆∞∆°ng c√≥ xu·∫•t hi·ªán hai b√™n c∆° th·ªÉ m·ªôt c√°ch ƒë·ªëi x·ª©ng kh√¥ng?

7. **Ki·ªÉu ph√¢n b·ªë**:  
   - T·ªïn th∆∞∆°ng r·∫£i r√°c, t·∫≠p trung th√†nh c·ª•m, theo m·∫£ng l·ªõn, hay theo ƒë∆∞·ªùng (v√≠ d·ª•: d·ªçc theo d√¢y th·∫ßn kinh)?

8. **D·∫•u hi·ªáu b·∫•t th∆∞·ªùng kh√°c**:  
   - C√≥ s∆∞ng n·ªÅ, ch·∫£y d·ªãch, c√≥ m·ªß v√†ng, ho·∫°i t·ª≠, l·ªü lo√©t, ho·∫∑c c√°c d·∫•u hi·ªáu ƒë·∫∑c bi·ªát nh∆∞ **ƒë∆∞·ªùng h·∫ßm d∆∞·ªõi da** kh√¥ng?

---

üéØ **L∆∞u √Ω c·ª±c k·ª≥ quan tr·ªçng**:  
L∆∞u √Ω c·ª±c k·ª≥ quan tr·ªçng:
B·∫°n ch·ªâ n√™n m√¥ t·∫£ nh·ªØng g√¨ quan s√°t ƒë∆∞·ª£c b·∫±ng m·∫Øt th∆∞·ªùng trong ·∫£nh. Kh√¥ng d·ª± ƒëo√°n, kh√¥ng suy lu·∫≠n ƒë·∫∑c ƒëi·ªÉm c√≥ th·ªÉ li√™n quan ƒë·∫øn b·ªánh l√Ω. Kh√¥ng ƒë∆∞a v√†o c√°c m√¥ t·∫£ g·ª£i √Ω t·ª´ kinh nghi·ªám y khoa, ch·ªâ m√¥ t·∫£ trung l·∫≠p.
- **Nhi·ªÖm n·∫•m (fungal-infections)**: b·ªù r√µ r√†ng, h√¨nh tr√≤n/v√≤ng, bong v·∫£y nh·∫π, th∆∞·ªùng ·ªü v√πng ·∫©m (b·∫πn, k·∫Ω tay, ch√¢n).  
- **Virus (virus)**: m·ª•n n∆∞·ªõc nh·ªè, ban ƒë·ªè d·∫°ng ƒë·ªëi x·ª©ng, t·ªïn th∆∞∆°ng theo c·ª•m ho·∫∑c theo d√¢y th·∫ßn kinh.  
- **Vi khu·∫©n (bacterial-infections)**: c√≥ m·ªß, s∆∞ng n√≥ng ƒë·ªè ƒëau, lo√©t, v·∫£y v√†ng, t·ªïn th∆∞∆°ng s√¢u.  
- **K√Ω sinh tr√πng (parasitic-infections)**: ng·ª©a d·ªØ d·ªôi, c√≥ ƒë∆∞·ªùng h·∫ßm d∆∞·ªõi da, s·∫©n nh·ªè ho·∫∑c m·ª•n n∆∞·ªõc r·∫£i r√°c ·ªü k·∫Ω ng√≥n, th·∫Øt l∆∞ng, m√¥ng.

L∆∞u √Ω:
- Kh√¥ng ƒë∆∞·ª£c ƒë∆∞a ra b·∫•t k·ª≥ ch·∫©n ƒëo√°n ho·∫∑c suy lu·∫≠n y t·∫ø n√†o.
- Ch·ªâ m√¥ t·∫£ kh√°ch quan nh·ªØng g√¨ nh√¨n th·∫•y ƒë∆∞·ª£c trong ·∫£nh.
- Kh√¥ng s·ª≠ d·ª•ng bullet point, markdown hay k√Ω hi·ªáu ƒë·∫∑c bi·ªát.

Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng ƒëo·∫°n vƒÉn y khoa m√¥ t·∫£, r√µ r√†ng, trung l·∫≠p.

"""
        response = model.generate_content([prompt, img])
        caption = response.text.replace("\n", " ").strip()
        return caption
    except Exception as e:
        logging.error(f"L·ªói khi t·∫°o caption v·ªõi Gemini: {e}")
        return None